name: Auto Deploy Spring Boot App

on:
  push:
    branches:
      - main  # Runs when code is pushed to the main branch

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build the Project
        shell: powershell
        run: mvn clean package -DskipTests

      - name: Verify JAR File Exists (PowerShell)
        shell: powershell
        run: |
          if (!(Test-Path -Path "target" -PathType Container)) {
            Write-Host "❌ No target directory found!"
            exit 1
          }

          $jarFile = Get-ChildItem -Path "target" -Filter "*.jar" | Select-Object -First 1

          if ($null -eq $jarFile) {
            Write-Host "❌ No JAR file found in target/! Exiting..."
            exit 1
          }

          Write-Host "✅ Found JAR file: $($jarFile.FullName)"
          echo "JAR_FILE=$($jarFile.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Login to Docker Hub
        shell: powershell
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" 

      - name: Build and Push Docker Image
        shell: powershell
        run: |
          $jarFile = Get-ChildItem -Path "target" -Filter "*.jar" | Select-Object -First 1
          Write-Host "✅ Using JAR file: $($jarFile.FullName)"
          
          Copy-Item -Path $jarFile.FullName -Destination "app.jar"  # Copy for Docker

          docker build -t "${{ secrets.DOCKER_USERNAME }}/springboot-app:latest" .
          docker push "${{ secrets.DOCKER_USERNAME }}/springboot-app:latest"

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to Remote Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/springboot-app:latest
            docker stop springboot-app || true
            docker rm springboot-app || true
            docker run -d --name springboot-app -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/springboot-app:latest
