name: Auto Deploy Spring Boot App

on:
  push:
    branches:
      - main  # Runs when code is pushed to the main branch

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build the Project
        run: mvn clean package -DskipTests

      - name: Verify JAR File Exists (Cross-Platform)
        shell: bash
        run: |
          if [ ! -d "target" ]; then
            echo "❌ No target directory found!"
            exit 1
          fi
          
          JAR_FILE=$(find target -maxdepth 1 -name "*.jar" | head -n 1)
          
          if [ -z "$JAR_FILE" ]; then
            echo "❌ No JAR file found in target/! Exiting..."
            exit 1
          fi
          
          echo "✅ Found JAR file: $JAR_FILE"
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV  # Store in environment variable

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          echo "✅ Using JAR file: $JAR_FILE"
          cp "$JAR_FILE" app.jar  # Copy so Docker can access it
          
          IMAGE_TAG=${{ secrets.DOCKER_USERNAME }}/springboot-app:$(date +%Y%m%d%H%M%S)  # Use timestamp as tag
          
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV  # Store tag for deploy job

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to Remote Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/springboot-app:latest
            docker stop springboot-app || true
            docker rm springboot-app || true
            docker run -d --name springboot-app -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/springboot-app:latest
