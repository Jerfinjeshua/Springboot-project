name: Auto Deploy Spring Boot App

on:
  push:
    branches:
      - main  # Runs when code is pushed to the main branch

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build the Project
        shell: powershell
        run: mvn clean package -DskipTests

      - name: Verify JAR File Exists (PowerShell)
        shell: powershell
        run: |
          if (!(Test-Path -Path "target" -PathType Container)) {
            Write-Host "❌ No target directory found!"
            exit 1
          }

          $jarFile = Get-ChildItem -Path "target" -Filter "*.jar" | Select-Object -First 1

          if ($null -eq $jarFile) {
            Write-Host "❌ No JAR file found in target/! Exiting..."
            exit 1
          }

          Write-Host "✅ Found JAR file: $($jarFile.FullName)"
          echo "JAR_FILE=$($jarFile.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Login to Docker Hub
        shell: powershell
        run: |
          docker logout
          $username = "${{ secrets.DOCKER_USERNAME }}"
          $password = "${{ secrets.DOCKER_PASSWORD }}"
          docker login -u $username -p $password
          if ($LASTEXITCODE -ne 0) {
            Write-Host "❌ Docker login failed!"
            exit 1
          }
          Write-Host "✅ Docker login successful!"

      - name: Build and Push Docker Image
        shell: powershell
        run: |
          $jarFile = Get-ChildItem -Path "target" -Filter "*.jar" | Select-Object -First 1
          if ($null -eq $jarFile) {
            Write-Host "❌ No JAR file found in target/! Exiting..."
            exit 1
          }

          Write-Host "✅ Using JAR file: $($jarFile.FullName)"
          Copy-Item -Path $jarFile.FullName -Destination "app.jar"

          $imageTag = "${{ secrets.DOCKER_USERNAME }}/springboot-app:latest"
          docker build -t $imageTag .
          docker push $imageTag

          Write-Host "✅ Docker Image pushed successfully!"
          echo "IMAGE_TAG=$imageTag" | Out-File -FilePath $env:GITHUB_ENV -Append

    deploy:
    runs-on: self-hosted  # Deploying locally

    needs: build
    steps:
      - name: Pull latest Docker image
        shell: powershell
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/springboot-app:latest

      - name: Stop and remove existing container (PowerShell Fix)
        shell: powershell
        run: |
          if (docker ps -q --filter "name=springboot-app") {
            docker stop springboot-app
            docker rm springboot-app
            Write-Host "✅ Stopped and removed existing container."
          } else {
            Write-Host "ℹ️ No running container found. Skipping stop & remove."
          }

      - name: Run new container
        shell: powershell
        run: |
          docker run -d --name springboot-app -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/springboot-app:latest
          Write-Host "✅ Spring Boot app is now running at http://localhost:8080"

      - name: Clean up old Docker images
        shell: powershell
        run: docker system prune -af
